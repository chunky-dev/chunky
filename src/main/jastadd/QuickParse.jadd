/* Copyright (c) 2010 Jesper ï¿½qvist <jesper@llbit.se>
 *
 * This file is part of Chunky.
 *
 * Chunky is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Chunky is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with Chunky.  If not, see <http://www.gnu.org/licenses/>.
 */
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Set;
import java.util.HashSet;

/**
 * A quick parse only fully parses the requested tags.
 */
aspect QuickParse {

	/**
	 * Parse only the requested tags.
	 *
	 * @param in The input stream of the NBT data
	 * @param request A set containing the requested tags
	 * @return Requested tag paths mapped to parsed tag data
	 */
	public static Map<String, AnyTag> NamedTag.quickParse(DataInputStream in, Set<String> request) {
		// create a tree of tags to be parsed, skip parsing for other tags
		Map<String, AnyTag> result = new ConcurrentHashMap<String, AnyTag>();
		Set<String> prefixes = new HashSet<String>();

		for (String tag : request) {
			String[] parts = tag.split("\\.");
			String prefix = "";
			for (int i = 0; i < parts.length-1; ++i) {
				if (i > 0)
					prefix += ".";
				prefix += parts[i];
				prefixes.add(prefix);
			}
		}

		// initialize result map so it contains error nodes for each requested tag
		for (String tag : request) {
			result.put(tag, new ErrorTag("[not loaded]"));
		}

		return partialParse(in, result, request, prefixes);
	}

	private static Map<String, AnyTag> NamedTag.partialParse(DataInputStream in,
			Map<String, AnyTag> result, Set<String> request, Set<String> prefixes) {

		try {
			byte type = in.readByte();
			if (type != 0) {
				SpecificTag name = StringTag.read(in);
				// we have no prefix as this is the top level tag
				String tag = name.stringValue();
				if (request.contains(tag)) {
					
					// full parse -- whole NBT file
					SpecificTag payload = SpecificTag.read(type, in);
					result.put(tag, payload);
					return result;

				} else if (prefixes.contains(tag)) {

					// partial parse
					if (type == 9) {
						return ListTag.partialParse(in, tag, result, request, prefixes);
					} else if (type == 10) {
						return CompoundTag.partialParse(in, tag, result, request, prefixes);
					}
				}
			}
		} catch (IOException e) {
		}
		// no tags read
		return result;
	}

	static Map<String, AnyTag> ListTag.partialParse(DataInputStream in, String prefix,
			Map<String, AnyTag> result, Set<String> request, Set<String> prefixes) {

		try {
			byte itemType = in.readByte();
			if (itemType == 0)
				return result;// cannot create list of TAG_End
			int nitems = in.readInt();
			for (int i = 0; i < nitems; ++i) {
				String tag = prefix + "." + i;
				if (request.contains(tag)) {
					SpecificTag last = SpecificTag.read(itemType, in);
					result.put(tag, last);
					request.remove(tag);
					if (request.isEmpty())
						return result;
				} else if (prefixes.contains(tag)) {
					if (itemType == 9) {
						result = ListTag.partialParse(in, tag, result, request, prefixes);
						if (request.isEmpty())
							return result;
					} else if (itemType == 10) {
						result = CompoundTag.partialParse(in, tag, result, request, prefixes);
						if (request.isEmpty())
							return result;
					}
				} else {
					SpecificTag.skip(itemType, in);
				}
			}
		} catch (IOException e) {
		}
		return result;
	}

	static Map<String, AnyTag> CompoundTag.partialParse(DataInputStream in, String prefix,
			Map<String, AnyTag> result, Set<String> request, Set<String> prefixes) {

		try {
			while (true) {
				byte type = in.readByte();
				if (type == 0)
					break;

				SpecificTag name = StringTag.read(in);
				String tag = prefix + "." + name.stringValue();
				if (request.contains(tag)) {
					
					// full parse
					SpecificTag payload = SpecificTag.read(type, in);
					result.put(tag, payload);
					request.remove(tag);
					if (request.isEmpty())
						return result;

				} else if (prefixes.contains(tag)) {

					// partial parse
					if (type == 9) {
						result = ListTag.partialParse(in, tag, result, request, prefixes);
						if (request.isEmpty())
							return result;
					} else if (type == 10) {
						result = CompoundTag.partialParse(in, tag, result, request, prefixes);
						if (request.isEmpty())
							return result;
					}
				} else {
					SpecificTag.skip(type, in);
				}
			}
		} catch (IOException e) {
		}
		return result;
	}

	/**
	 * Skip the specific tag type in the input stream.
	 */
	static void SpecificTag.skip(byte type, DataInputStream in) {
		try {
			switch (type) {
				case 1:
					// TAG_Byte
					in.skipBytes(1);
					break;
				case 2:
					// TAG_Short
					in.skipBytes(2);
					break;
				case 3:
					// TAG_Int
					in.skipBytes(4);
					break;
				case 4:
					// TAG_Long
					in.skipBytes(8);
					break;
				case 5:
					// TAG_Float
					in.skipBytes(4);
					break;
				case 6:
					// TAG_Double
					in.skipBytes(8);
					break;
				case 7:
					ByteArrayTag.skip(in);
					break;
				case 8:
					StringTag.skip(in);
					break;
				case 9:
					ListTag.skip(in);
					break;
				case 10:
					CompoundTag.skip(in);
					break;
				case 11:
					IntArrayTag.skip(in);
					break;
			}
		} catch (IOException e) {
		}
	}

	static void ByteArrayTag.skip(DataInputStream in) {
		try {
			int length = in.readInt();
			in.skipBytes(length);
		} catch (IOException e) {
		}
	}
	
	static void IntArrayTag.skip(DataInputStream in) {
		try {
			int length = in.readInt();
			in.skipBytes(length * 4);
		} catch (IOException e) {
		}
	}

	static void StringTag.skip(DataInputStream in) {
		try {
			short length = in.readShort();
			in.skipBytes(length);
		} catch (IOException e) {
		}
	}

	static void ListTag.skip(DataInputStream in) {
		try {
			byte itemType = in.readByte();
			if (itemType == 0)
				return;
			int nitems = in.readInt();
			for (int i = 0; i < nitems; ++i)
				SpecificTag.skip(itemType, in);
		} catch (IOException e) {
		}
	}

	static void CompoundTag.skip(DataInputStream in) {
		try {
			while (true) {
				byte itemType = in.readByte();
				if (itemType == 0)
					break;

				StringTag.skip(in);
				SpecificTag.skip(itemType, in);
			}
		} catch (IOException e) {
		}
	}
}
