apply plugin: 'application'
apply plugin: 'maven-publish'

mainClassName = 'se.llbit.chunky.main.Chunky'
archivesBaseName = 'chunky-core'

configurations {
  implementation.extendsFrom configurations.jsonlib
  implementation.extendsFrom configurations.nbtlib
  implementation.extendsFrom configurations.cplib
  implementation.extendsFrom configurations.toolpanelib
}

dependencies {
  implementation 'it.unimi.dsi:fastutil:8.4.4'
  implementation 'org.apache.commons:commons-math3:3.2'
  implementation 'com.google.code.gson:gson:2.9.0'
  implementation 'org.lz4:lz4-java:1.8.0'
  implementation project(':lib')

  testImplementation 'com.google.truth:truth:1.1.3'
  testImplementation 'junit:junit:4.13.2'
}

jar {
  // Include all dependencies in the Jar.
  from project(':lib').configurations.archives.allArtifacts.files.collect {
    zipTree(it)
  }
  from configurations.jsonlib.files.collect {
    zipTree(it)
  }
  from configurations.nbtlib.files.collect {
    zipTree(it)
  }
  from configurations.cplib.files.collect {
    zipTree(it)
  }
  from configurations.toolpanelib.files.collect {
    zipTree(it)
  }
  manifest {
    attributes('Main-Class': mainClassName)
  }
  into('se/llbit/chunky/main') {
    from file("src/gen-res/Version.properties")
  }
}

sourceSets {
  main {
    java {
      srcDir 'src/java'
    }
    resources {
      srcDir 'src/res'
      exclude 'se/llbit/chunky/main/Version.properties'
    }
  }
  test {
    java {
      srcDir 'src/test'
    }
  }
}

processResources.dependsOn 'updateVersionString'

task updateVersionString {
  description 'Store the current version string in src/gen-res/Version.properties'

  outputs.upToDateWhen {
    def props = new Properties()
    def output = file('src/gen-res/Version.properties')
    if (output.isFile()) {
      output.withInputStream { stream -> props.load(stream) }
    }
    props['version'] == project.version
  }

  doLast {
    file('src/gen-res').mkdirs()
    def date = new Date()
    def versionFile = file('src/gen-res/Version.properties')
    ant.propertyfile(file: versionFile) {
      entry(key: 'version', value: project.version)
      entry(key: 'gitSha', value: tryCommand(['git', 'rev-parse', 'HEAD']).trim())
    }
  }
}

task javadocJar(type: Jar) {
  from rootProject.docs
  archiveClassifier.set('javadoc')
}

task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  archiveClassifier.set('sources')
}

artifacts {
  archives javadocJar, sourcesJar
}

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      pom {
        name = "Chunky"
        packaging = "jar"
        description = "Minecraft mapping and rendering tool"
        url = "http://chunky.llbit.se"
        artifactId = archivesBaseName
        version = "2.5.0-SNAPSHOT"

        licenses {
          license {
            name = "GNU General Public License Version 3 (GPLv3)"
            url = "https://www.gnu.org/licenses/gpl-3.0.en.html"
            distribution = "repo"
          }
          developers {
            developer {
              name = "Jesper Ã–qvist"
              email = "jesper@llbit.se"
            }
          }
          scm {
            connection = "scm:git:https://github.com/chunky-dev/chunky.git"
            url = "https://github.com/chunky-dev/chunky"
          }
        }
      }
      artifact sourcesJar
      artifact javadocJar
    }

    // fix dependency scopes (see https://discuss.gradle.org/t/maven-publish-plugin-generated-pom-making-dependency-scope-runtime/7494/9)
    // and filter dependencies
    publishing.publications.all {
      pom.withXml {
        asNode().dependencies.'*'.findAll() {
          it.scope.text() == 'runtime' && project.configurations.implementation.allDependencies.find { dep ->
            dep.name == it.artifactId.text()
          }
        }.each() {
          if (it.groupId.text() == "org.openjfx") {
            // remove javafx dependencies for now (maybe make them optional in the future?)
            it.parent().remove(it)
            // it.appendNode('optional', 'true')
          } else if (it.groupId.text() == "se.llbit") {
            // se.llbit dependencies are included in chunky-core
            it.parent().remove(it)
          } else {
            // everything else is a dependency as usual
            it.scope*.value = 'compile'
          }
        }
      }
    }
  }

  repositories {
    maven {
      name 'Build'
      url layout.buildDirectory.dir('maven')
    }
  }
}
